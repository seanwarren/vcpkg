--- CMakeLists.txt
+++ CMakeLists.txt
@@ -67,6 +67,11 @@
     cmake_policy(SET CMP0060 NEW)
 endif()
 
+# Make IMPORTED_LINK_INTERFACE_LIBRARIES per configuration when exported
+if(POLICY CMP0022)
+   cmake_policy(SET CMP0022 OLD)
+endif()
+
 
 #---------------------------------------------------------------------
 # Set project information
--- cmake/bioimageConfig.cmake.in
+++ cmake/bioimageConfig.cmake.in
@@ -1,4 +1,9 @@
 @PACKAGE_INIT@
 
+include(CMakeFindDependencyMacro)
+find_dependency(PROJ4)
+find_dependency(GeoTIFF)
+find_dependency(Exiv2)
+find_dependency(OpenJPEG)
 include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
 check_required_components("@PROJECT_NAME@")

--- cmake/Modules/FindLCMS2.cmake
+++ cmake/Modules/FindLCMS2.cmake
@@ -29,18 +29,32 @@
    PATH_SUFFIXES lcms2 liblcms2
 )
 
-find_library(LCMS2_LIBRARIES NAMES lcms2 liblcms2 lcms-2 liblcms-2
+find_library(LCMS2_RELEASE_LIBRARY NAMES lcms2
    PATHS     
    ${PC_LCMS2_LIBDIR}
    ${PC_LCMS2_LIBRARY_DIRS}
    PATH_SUFFIXES lcms2
 )
 
-if(LCMS2_INCLUDE_DIR AND LCMS2_LIBRARIES)
+find_library(LCMS2_DEBUG_LIBRARY NAMES lcms2d
+   PATHS     
+   ${PC_LCMS2_LIBDIR}
+   ${PC_LCMS2_LIBRARY_DIRS}
+   PATH_SUFFIXES lcms2
+)
+
+
+if(LCMS2_INCLUDE_DIR AND LCMS2_RELEASE_LIBRARY)
    set(LCMS2_FOUND TRUE)
-else(LCMS2_INCLUDE_DIR AND LCMS2_LIBRARIES)
+else()
    set(LCMS2_FOUND FALSE)
-endif(LCMS2_INCLUDE_DIR AND LCMS2_LIBRARIES)
+endif()
+
+if (LCMS2_DEBUG_LIBRARY)
+   set(LCMS2_LIBRARIES optimized "${LCMS2_RELEASE_LIBRARY}" debug "${LCMS2_DEBUG_LIBRARY}")
+else()
+   set(LCMS2_LIBRARIES ${LCMS2_RELEASE_LIBRARY})
+endif()
 
 if(LCMS2_FOUND)
    file(READ ${LCMS2_INCLUDE_DIR}/lcms2.h LCMS2_VERSION_CONTENT)
--- cmake/Modules/FindTIFF.cmake
+++ cmake/Modules/FindTIFF.cmake
@@ -47,14 +47,52 @@
 endforeach()
 
 if(NOT TIFF_LIBRARY)
-    find_library(TIFF_LIBRARY_RELEASE NAMES ${TIFF_NAMES})
-    find_library(TIFF_LIBRARY_DEBUG NAMES ${TIFF_NAMES_DEBUG})
+    find_library(TIFF_LIBRARY_RELEASE 
+        NAMES ${TIFF_NAMES}
+        PATH_SUFFIXES "lib" "local/lib")
+    find_library(TIFF_LIBRARY_DEBUG 
+        NAMES ${TIFF_NAMES_DEBUG}
+        PATH_SUFFIXES "debug/lib" "lib" "local/lib")
+
+    if(TIFF_LIBRARY_RELEASE)
+
+        get_filename_component(TIFF_LIBRARY_NAME ${TIFF_LIBRARY_RELEASE} NAME_WE)
+        get_filename_component(TIFF_LIBRARY_EXTENSION ${TIFF_LIBRARY_RELEASE} EXT)
+        get_filename_component(TIFF_LIBRARY_PATH ${TIFF_LIBRARY_RELEASE} DIRECTORY)
+        get_filename_component(TIFF_DEBUG_LIBRARY_PATH ${TIFF_LIBRARY_DEBUG} DIRECTORY)
+
+        message("searching for: "${TIFF_LIBRARY_NAME}xx${TIFF_LIBRARY_EXTENSION}" in ${TIFF_LIBRARY_PATH}")
+
+        find_library(TIFFXX_LIBRARY_RELEASE 
+            NAMES "${TIFF_LIBRARY_NAME}xx${TIFF_LIBRARY_EXTENSION}"
+            PATHS ${TIFF_LIBRARY_PATH}
+            NO_DEFAULT_PATH)
+        find_library(TIFFXX_LIBRARY_DEBUG
+            NAMES "${TIFF_LIBRARY_NAME}xxd${TIFF_LIBRARY_EXTENSION}"
+            PATHS ${TIFF_DEBUG_LIBRARY_PATH}
+            NO_DEFAULT_PATH)
+
+        if(TIFFXX_LIBRARY_RELEASE)
+            list(APPEND TIFF_LIBRARY_RELEASE ${TIFFXX_LIBRARY_RELEASE})
+            list(APPEND TIFF_LIBRARY_DEBUG ${TIFFXX_LIBRARY_DEBUG})
+            set(CPP_TIFF_LIBRARY optimised  ${TIFFXX_LIBRARY_RELEASE} debug  ${TIFFXX_LIBRARY_DEBUG})
+            set(TIFF_CXX_FOUND TRUE)
+        else()
+            message(FATAL_ERROR "Could NOT find TIFF/C++ library ${CPP_TIFF_LIBRARY}.")
+        endif()
+
+    endif()
+
     include(SelectLibraryConfigurations)
     select_library_configurations(TIFF)
     mark_as_advanced(TIFF_LIBRARY_RELEASE TIFF_LIBRARY_DEBUG)
+
 endif()
 unset(TIFF_NAMES)
 unset(TIFF_NAMES_DEBUG)
+unset(TIFF_LIBRARY_NAME)
+unset(TIFF_LIBRARY_PATH)
+unset(TIFF_LIBRARY_EXTENSION)
 
 if(TIFF_INCLUDE_DIR AND EXISTS "${TIFF_INCLUDE_DIR}/tiffvers.h")
     file(STRINGS "${TIFF_INCLUDE_DIR}/tiffvers.h" tiff_version_str
@@ -101,49 +142,6 @@
         endif()
     endif()
 
-    # looking for C++ version of library libtiffxx.so
-    set(TIFF_CXX_FOUND FALSE)
-    foreach(TIFF_LIBRARY ${TIFF_LIBRARIES})
-        # We do not want just any tiffxx library, we specifically want
-        # the one that belongs to the tiff library we found before. So we
-        # expect the same path and extension.
-        get_filename_component(TIFF_LIBRARY_NAME ${TIFF_LIBRARY} NAME_WE)
-        get_filename_component(TIFF_LIBRARY_PATH ${TIFF_LIBRARY} DIRECTORY)
-        get_filename_component(TIFF_LIBRARY_EXTENSION ${TIFF_LIBRARY} EXT)
-        if(TIFF_LIBRARY_NAME MATCHES "d$")
-            # Check for libtiffdxx:
-            set(CPP_TIFF_LIBRARY "${TIFF_LIBRARY_PATH}/${TIFF_LIBRARY_NAME}xx${TIFF_LIBRARY_EXTENSION}")
-            if(NOT EXISTS ${CPP_TIFF_LIBRARY})
-                message("-- Could NOT find (debug) TIFF/C++ library ${CPP_TIFF_LIBRARY}.")
-                # Check for libtiffxxd:
-                string(REGEX REPLACE "d$" "" TIFF_LIBRARY_NAME ${TIFF_LIBRARY_NAME})
-                set(CPP_TIFF_LIBRARY "${TIFF_LIBRARY_PATH}/${TIFF_LIBRARY_NAME}xxd${TIFF_LIBRARY_EXTENSION}")
-                if(NOT EXISTS ${CPP_TIFF_LIBRARY})
-                    message("-- Could NOT find (debug) TIFF/C++ library ${CPP_TIFF_LIBRARY}.")
-                    continue()
-                endif()
-            endif()
-        else()
-            # Check for libtiffxx:
-            set(CPP_TIFF_LIBRARY "${TIFF_LIBRARY_PATH}/${TIFF_LIBRARY_NAME}xx${TIFF_LIBRARY_EXTENSION}")
-            if(NOT EXISTS ${CPP_TIFF_LIBRARY})
-                message("-- Could NOT find TIFF/C++ library ${CPP_TIFF_LIBRARY}.")
-                continue()
-            endif()
-        endif()
-
-        message("-- Found TIFF/C++ library ${CPP_TIFF_LIBRARY}")
-        set(TIFF_CXX_FOUND TRUE)
-        list(APPEND TIFF_LIBRARIES "${CPP_TIFF_LIBRARY}")
-        unset(TIFF_LIBRARY)
-        unset(TIFF_LIBRARY_NAME)
-        unset(TIFF_LIBRARY_PATH)
-        unset(TIFF_LIBRARY_EXTENSION)
-        break()
-    endforeach()
-    if(NOT TIFF_CXX_FOUND)
-        message(FATAL_ERROR "Could NOT find TIFF/C++ library ${CPP_TIFF_LIBRARY}.")
-    endif()
 endif()
 
-mark_as_advanced(TIFF_INCLUDE_DIR TIFF_LIBRARY)
\ No newline at end of file
+mark_as_advanced(TIFF_INCLUDE_DIR TIFF_LIBRARY)
--- libsrc/libbioimg/core_lib/xtypes.h
+++ libsrc/libbioimg/core_lib/xtypes.h
@@ -52,7 +52,12 @@
 typedef	short int16;
 typedef	unsigned short uint16;
 
-#if defined(WIN32) || defined(WIN64) || defined(_WIN32) || defined(_WIN64) || defined(_MSVC)
+#if defined(__APPLE__)
+typedef int32_t int32;
+typedef long int64;
+typedef uint32_t uint32;
+typedef unsigned long uint64;
+#elif defined(WIN32) || defined(WIN64) || defined(_WIN32) || defined(_WIN64) || defined(_MSVC)
 typedef __int32 int32;
 typedef __int64 int64;
 typedef unsigned __int32 uint32;
--- libsrc/libbioimg/formats_api/bim_image.h
+++ libsrc/libbioimg/formats_api/bim_image.h
@@ -67,7 +67,7 @@
 #endif //BIM_USE_EIGEN
 
 #ifdef BIM_USE_OPENCV
-#include <opencv2/core/core.hpp>
+namespace cv { class Mat; }
 #endif //BIM_USE_OPENCV
 
 #ifdef BIM_USE_NUMPY
--- libsrc/libbioimg/formats/jp2/bim_jp2_format.cpp
+++ libsrc/libbioimg/formats/jp2/bim_jp2_format.cpp
@@ -252,30 +252,6 @@
         par->buffer_icc.resize(par->image->icc_profile_len);
         memcpy(&par->buffer_icc[0], par->image->icc_profile_buf, par->image->icc_profile_len);
     }
-
-    // Read the main header of the codestream, and if necessary the JP2 boxes
-    if (par->image && par->image->cp_comment) {
-        size_t endpos = 0;
-        size_t startpos = 0;
-        const char* comment;
-        while (true) {
-            ++endpos;
-            if (par->image->cp_comment[endpos] == 0 && par->image->cp_comment[endpos + 1] != 0) {
-                // A single zero character followed by a non-zero character indicates the end
-                // of one comment. So here is a break between two concatenated comments:
-                comment = (par->image->cp_comment + startpos);
-                par->comments.push_back(comment);
-                startpos = endpos + 1;
-            } else if (par->image->cp_comment[endpos] == 0 && par->image->cp_comment[endpos + 1] == 0 && par->image->cp_comment[endpos + 2] == 0) {
-                // Three consecutive zero characters indicate the end of the comments list.
-                // So here is the end of all string comments:
-                comment = (par->image->cp_comment + startpos);
-                par->comments.push_back(comment);
-                break;
-            }
-        }
-    }
-
 }
 
 void jp2GetImageInfo(FormatHandle *fmtHndl) {
